{"version":3,"sources":["appContext.js","modules/googleApi/withGoogleApiContext.js","modules/misson/data.js","base/grid/GridRow.js","base/grid/Grid.js","App.js","modules/misson/MissionsGrid.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","withGoogleApiContext","Component","state","distanceBetween","from","to","Promise","resolve","reject","window","google","maps","geometry","spherical","computeDistanceBetween","addressToGeocode","address","geocoder","Geocoder","geocode","results","status","lat","location","lng","props","Provider","value","data","agent","country","date","GridRow","row","rowStyle","Object","keys","map","key","j","className","Grid","headerData","footerData","length","name","l","obj","i","MissionsGridWithGoogleApi","useContext","useState","gridData","setGridData","setRowStyle","useEffect","closest","farthest","closestRowNum","farthestRowNum","then","a","all","distance","tempClosest","tempFarthest","catch","err","console","error","getData","sortedByDate","sort","b","d1","Date","getTime","d2","normalized","reduce","acc","next","agents","push","countries","agentIdies","isolationDegree","mostIsolatedCountry","countryName","entries","id","alert","log","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a5db8497.chunk.js","sourcesContent":["import React from 'react'\nconst AppContext = React.createContext({})\nexport default AppContext","\nimport React from 'react'\nimport AppContext from '../../appContext'\nconst withGoogleApiContext = (Component) => {\n    \n    const distanceBetween = (from, to)=>{\n        return new Promise((resolve, reject) => {\n            resolve(window.google.maps.geometry.spherical.computeDistanceBetween(from, to))\n        })\n    }\n\n    const addressToGeocode = (address)=>{\n        const geocoder = new window.google.maps.Geocoder();\n        return new Promise((resolve, reject) => {\n            geocoder.geocode( { 'address': address}, function(results, status) {\n            if (status === 'OK') {\n                resolve({\n                    lat: results[0].geometry.location.lat,\n                    lng: results[0].geometry.location.lng\n                })\n            } else {\n              reject('Geocode was not successful for the following reason: ' + status);\n            }\n          });\n        })\n    }\n    const state = {\n        distanceBetween,\n        addressToGeocode\n    }\n\n    return function (props) {\n        return <AppContext.Provider value={state}>\n            <Component {...props} />\n        </AppContext.Provider>\n    }\n}\n\nexport default withGoogleApiContext","const data = [\n    {agent: '007', country: 'Brazil', \n         address: 'Avenida Vieira Souto 168 Ipanema, Rio de Janeiro',\n         date: 'Dec 17, 1995, 9:45:17 PM'\n    },\n    {agent: '005', country: 'Poland', \n         address: 'Rynek Glowny 12, Krakow',\n         date: 'Apr 5, 2011, 5:05:12 PM'\n    },\n    {agent: '007', country: 'Morocco', \n         address: '27 Derb Lferrane, Marrakech',\n         date: 'Jan 1, 2001, 12:00:00 AM'\n    },\n    {agent: '005', country: 'Brazil', \n         address: 'Rua Roberto Simonsen 122, Sao Paulo',\n         date: 'May 5, 1986, 8:40:23 AM'\n    },\n    {agent: '011', country: 'Poland', \n         address: 'swietego Tomasza 35, Krakow',\n         date: 'Sep 7, 1997, 7:12:53 PM'\n    },\n    {agent: '003', country: 'Morocco', \n         address: 'Rue Al-Aidi Ali Al-Maaroufi, Casablanca',\n         date: 'Aug 29, 2012, 10:17:05 AM'\n    },\n    {agent: '008', country: 'Brazil', \n         address: 'Rua tamoana 418, tefe',\n         date: 'Nov 10, 2005, 1:25:13 PM'\n    },\n    {agent: '013', country: 'Poland', \n         address: 'Zlota 9, Lublin',\n         date: 'Oct 17, 2002, 10:52:19 AM'\n    },\n    {agent: '002', country: 'Morocco', \n         address: 'Riad Sultan 19, Tangier',\n         date: 'Jan 1, 2017, 5:00:00 PM'\n    },\n    {agent: '009', country: 'Morocco', \n         address: 'atlas marina beach, agadir',\n         date: 'Dec 1, 2016, 9:21:21 PM'\n    }\n ]\n\n export default data","import React from 'react'\n\nconst isObject = (val) => {\n    return val instanceof Object\n}\nconst GridRow = ({row, rowStyle}) => {\n    return <>\n    {Object.keys(row).map((key, j) => {\n        return !isObject(row[key]) ? <span key={j} className={`grid-column ${rowStyle&&rowStyle}`}>{row[key]}</span> : null\n    })}\n\n</>\n}\n\nexport default GridRow","import React from 'react'\nimport GridRow from './GridRow'\n\nconst Grid = ({ data, headerData, footerData, rowStyle }) => {\n\n    return data.length ? <div className=\"grid-container\">\n        <div className=\"grid\">\n            {headerData.map((name, l) => <strong key={l} className=\"grid-column header-column\">{name}</strong>)}\n            {data.map((obj, i) => {\n                return (\n                    <GridRow key={i} row={obj} rowStyle={rowStyle&&rowStyle[i]} />\n                )\n            })}\n        </div>\n        <footer className=\"grid-footer\">{footerData}</footer>\n    </div> : null\n}\n\nexport default Grid","import React from 'react';\nimport './App.css';\n\nimport withGoogleApiContext from './modules/googleApi/withGoogleApiContext'\nimport MissionsGrid from './modules/misson/MissionsGrid'\n\nconst MissionsGridWithGoogleApi = withGoogleApiContext(MissionsGrid)\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <MissionsGridWithGoogleApi />\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useContext, useState, useEffect} from 'react'\nimport AppContext from '../../appContext'\nimport data from './data'\nimport Grid from '../../base/grid/Grid'\n\nconst MissionsGrid = (props) => {\n    const {addressToGeocode, distanceBetween} = useContext(AppContext)\n    const address = '10 Downing st. London'\n    const [gridData, setGridData] = useState([])\n    const [ rowStyle, setRowStyle] = useState({})\n\n    useEffect(()=>{\n        let closest, farthest, closestRowNum=0, farthestRowNum=0;\n        addressToGeocode(address).then(to=>{\n            const getData = async () => {\n                return await Promise.all(data.map((obj, i)=> {\n                    \n                    return addressToGeocode(obj.address).then(from=>{\n                        return distanceBetween(from, to).then(distance=>{\n                            let tempClosest = closest, tempFarthest = farthest;\n                            closest = closest?(distance<closest?distance:closest) : distance;\n                            farthest = farthest?(distance>farthest?distance:farthest) : distance;\n                            \n                            if (closest !== tempClosest) {\n                                closestRowNum = i \n                            }\n                            if(farthest !== tempFarthest){\n                                farthestRowNum = i\n                            }\n\n                            return obj\n                        }).catch(err=>console.error(err))\n                    })\n                }))\n            }\n            getData().then(data=>{\n                const sortedByDate = data.sort((a,b)=>{\n                    const d1 = new Date(a.date).getTime\n                    const d2 = new Date(b.date).getTime\n                    return (d1 > d2)? 1 : ((d1 < d2)? -1: 0)    \n                })\n\n                setRowStyle({\n                    [farthestRowNum]: 'red',\n                    [closestRowNum]: 'green'\n                })\n                setGridData(sortedByDate)\n            })\n        })\n        \n        const normalized = data.reduce((acc, next) => {\n            if (acc.agents[next.agent]) {\n                acc.agents[next.agent].push(next.country)\n            } else {\n                acc.agents[next.agent] = [next.country]\n            }\n            \n            if (acc.countries[next.country]) {\n                acc.countries[next.country].agentIdies.push(next.agent)\n            } else {\n                acc.countries[next.country] = { agentIdies: [next.agent], isolationDegree: 0 }\n            }\n            \n            return acc\n        }, { agents: {}, countries: {} })\n        \n        const mostIsolatedCountry = {\n            isolationDegree:0,\n            countryName:''\n        }\n        const countries = Object.entries(normalized.countries).map(([country, obj]) => {\n            let isolationDegree = 0\n            for (var id of obj.agentIdies) {\n                if (normalized.agents[id].length === 1) {\n                    isolationDegree++\n                }\n            }\n            if(isolationDegree > mostIsolatedCountry.isolationDegree){\n                mostIsolatedCountry.isolationDegree = isolationDegree\n                mostIsolatedCountry.countryName = country\n            }\n            const newObj = { ...obj, isolationDegree }\n            return [country, newObj]\n        })\n        \n        alert(`${mostIsolatedCountry.countryName} is the most isolated with isolation degree of ${mostIsolatedCountry.isolationDegree}`)\n        console.log(\"countries with Isolation degree\", countries)\n        \n    },[addressToGeocode,distanceBetween])\n        const headerData = ['Agent ID', 'Country', 'Address', 'Date']\n        return <Grid rowStyle={rowStyle} data={gridData} headerData={headerData} footerData={`${gridData.length} missions`} />\n    }\n\nexport default MissionsGrid","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}